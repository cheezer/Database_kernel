1. My name: Qizhe Xie.
2. I have implemented full features.
3. For loved pages, I recorded the last_used_time of every page. A timestamp is increased by 1 everytime BufMgr::unpinPage is called and is used to denote the last_used_time of the unpined page. Then different pages' last_used_time can't be the same. I maintanined a sequence Q of <pageid's last_used_time, pageid> for every loved page with pin_count = 0. The sequence Q is maintained using balanced tree(map class in C++) to guarantee that Q is sorted by last_used_time. I use balanced tree because it's very efficient. To find a page for replacement, we can just get the first element of Q using O(log N) time where N is the number of loved pages with pin_count=0. If a page is pined or unpined and needs to be inserted or deleted in Q, it also takes only O(log N) time. Similar for hated pages.